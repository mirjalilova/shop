basePath: /
definitions:
  entity.BucketItemCreate:
    properties:
      count:
        type: integer
      product_id:
        type: string
      user_id:
        type: string
    type: object
  entity.BucketItemRes:
    properties:
      count:
        type: integer
      id:
        type: string
      img_url:
        type: string
      price:
        type: number
      product_id:
        type: string
      product_name:
        type: string
      product_price:
        type: number
      product_size:
        type: integer
      product_type:
        type: string
    type: object
  entity.BucketItemUpdateBody:
    properties:
      count:
        type: integer
      price:
        type: number
    type: object
  entity.BucketRes:
    properties:
      Buskets:
        items:
          $ref: '#/definitions/entity.BucketItemRes'
        type: array
      bucket_id:
        type: string
      total_price:
        type: number
    type: object
  entity.CategoryCreate:
    properties:
      name:
        type: string
    type: object
  entity.CategoryGetAllRes:
    properties:
      Categorys:
        items:
          $ref: '#/definitions/entity.CategoryRes'
        type: array
      count:
        type: integer
    type: object
  entity.CategoryRes:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  entity.CreateUser:
    properties:
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  entity.DebtLogCreate:
    properties:
      amount:
        type: integer
      reason:
        type: string
      user_id:
        type: string
    type: object
  entity.DebtLogGetAllRes:
    properties:
      count:
        type: integer
      debt_logs:
        items:
          $ref: '#/definitions/entity.DebtLogRes'
        type: array
    type: object
  entity.DebtLogRes:
    properties:
      amount:
        type: integer
      given_time:
        type: string
      id:
        type: string
      reason:
        type: string
      status:
        type: string
      taken_time:
        type: string
      user_id:
        type: string
      user_name:
        type: string
    type: object
  entity.DebtLogUpdateBody:
    properties:
      amount:
        type: integer
      reason:
        type: string
      status:
        type: string
    type: object
  entity.Formalize:
    properties:
      count:
        type: integer
      product_id:
        type: string
    type: object
  entity.Location:
    properties:
      latitude:
        example: 41.311081
        type: number
      longitude:
        example: 69.240562
        type: number
    type: object
  entity.LoginReq:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  entity.LoginRes:
    properties:
      token:
        type: string
      user_info:
        $ref: '#/definitions/entity.UserInfo'
    type: object
  entity.OrderCreate:
    properties:
      bucket_id:
        type: string
      description:
        type: string
      location:
        $ref: '#/definitions/entity.Location'
      payment_type:
        type: string
      user_id:
        type: string
    type: object
  entity.OrderItemRes:
    properties:
      count:
        type: integer
      id:
        type: string
      img_url:
        type: string
      price:
        type: number
      product_id:
        type: string
      product_name:
        type: string
      product_price:
        type: number
      product_size:
        type: integer
      product_type:
        type: string
    type: object
  entity.OrderRes:
    properties:
      description:
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/entity.Location'
      orders:
        items:
          $ref: '#/definitions/entity.OrderItemRes'
        type: array
      payment_type:
        type: string
      status:
        type: string
      total_price:
        type: number
    type: object
  entity.OrderStatus:
    properties:
      status:
        type: string
    type: object
  entity.ProductCreate:
    properties:
      category_id:
        type: string
      count:
        type: integer
      description:
        type: string
      img_url:
        type: string
      name:
        type: string
      price:
        type: number
      qr_code:
        type: string
      size:
        type: integer
      type:
        type: string
    type: object
  entity.ProductGetAllRes:
    properties:
      Products:
        items:
          $ref: '#/definitions/entity.ProductRes'
        type: array
      count:
        type: integer
    type: object
  entity.ProductRes:
    properties:
      category_id:
        type: string
      count:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      img_url:
        type: string
      name:
        type: string
      price:
        type: number
      size:
        type: integer
      type:
        type: string
    type: object
  entity.Report:
    properties:
      chek:
        type: string
      user_id:
        type: string
    type: object
  entity.UpdateUserBody:
    properties:
      name:
        type: string
      phone_number:
        type: string
    type: object
  entity.UserInfo:
    properties:
      created_at:
        type: string
      debt:
        type: integer
      id:
        type: string
      name:
        type: string
      phone_number:
        type: string
    type: object
  entity.UserList:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/entity.UserInfo'
        type: array
    type: object
info:
  contact: {}
  description: This is a sample server Ccenter News server.
  title: Ccenter News API
  version: "1.0"
paths:
  /bucket/create:
    post:
      consumes:
      - application/json
      description: Create a new Bucket Item with the provided details
      parameters:
      - description: Bucket Details
        in: body
        name: Bucket
        required: true
        schema:
          $ref: '#/definitions/entity.BucketItemCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new Bucket Item
      tags:
      - Bucket
  /bucket/delete:
    delete:
      consumes:
      - application/json
      description: Delete an Bucket by ID
      parameters:
      - description: Bucket Item ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Bucket deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete an Bucket
      tags:
      - Bucket
  /bucket/get:
    get:
      consumes:
      - application/json
      description: Get all Bucket
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.BucketRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Bucket
      tags:
      - Bucket
  /bucket/update:
    put:
      consumes:
      - application/json
      description: Update an Bucket's details
      parameters:
      - description: Bucket ID
        in: query
        name: id
        required: true
        type: string
      - description: Bucket Update Details
        in: body
        name: Bucket
        required: true
        schema:
          $ref: '#/definitions/entity.BucketItemUpdateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an Bucket
      tags:
      - Bucket
  /category/create:
    post:
      consumes:
      - application/json
      description: Create a new Category with the provided details
      parameters:
      - description: Category Details
        in: body
        name: Category
        required: true
        schema:
          $ref: '#/definitions/entity.CategoryCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new Category
      tags:
      - Category
  /category/delete:
    delete:
      consumes:
      - application/json
      description: Delete an Category by ID
      parameters:
      - description: Category ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete an Category
      tags:
      - Category
  /category/get:
    get:
      consumes:
      - application/json
      description: Get an Category by their ID
      parameters:
      - description: Category ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CategoryRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Category by ID
      tags:
      - Category
  /category/list:
    get:
      consumes:
      - application/json
      description: Get all Categories with optional filtering
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CategoryGetAllRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all Categories
      tags:
      - Category
  /category/update:
    put:
      consumes:
      - application/json
      description: Update an Category's details
      parameters:
      - description: Category ID
        in: query
        name: id
        required: true
        type: string
      - description: Category Update Details
        in: body
        name: Category
        required: true
        schema:
          $ref: '#/definitions/entity.CategoryCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an Category
      tags:
      - Category
  /debt/create:
    post:
      consumes:
      - application/json
      description: Create a new Debt Item with the provided details
      parameters:
      - description: Debt Details
        in: body
        name: Debt
        required: true
        schema:
          $ref: '#/definitions/entity.DebtLogCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new Debt Item
      tags:
      - Debt
  /debt/get:
    get:
      consumes:
      - application/json
      description: Get an Debt by their ID
      parameters:
      - description: User ID
        in: query
        name: id
        type: string
      - description: Status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.DebtLogGetAllRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Debt by ID
      tags:
      - Debt
  /debt/report:
    post:
      consumes:
      - application/json
      description: Generate a report of Debts within a specified date range
      parameters:
      - description: Chek
        in: body
        name: Debt
        required: true
        schema:
          $ref: '#/definitions/entity.Report'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Generate Debt Report
      tags:
      - Debt
  /debt/update:
    put:
      consumes:
      - application/json
      description: Update an Debt's details
      parameters:
      - description: Debt ID
        in: query
        name: id
        required: true
        type: string
      - description: Debt Update Details
        in: body
        name: Debt
        required: true
        schema:
          $ref: '#/definitions/entity.DebtLogUpdateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an Debt
      tags:
      - Debt
  /img-upload:
    post:
      consumes:
      - multipart/form-data
      description: File upload
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: File upload
      tags:
      - file-upload
  /kassa/add:
    post:
      consumes:
      - application/json
      description: Add an item to the Kassa
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add an item to the Kassa
      tags:
      - Kassa
  /kassa/formalize:
    post:
      consumes:
      - application/json
      description: Formalize an item in the Kassa
      parameters:
      - description: Formalize body
        in: body
        name: id
        required: true
        schema:
          items:
            $ref: '#/definitions/entity.Formalize'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Formalize an item in the Kassa
      tags:
      - Kassa
  /order/create:
    post:
      consumes:
      - application/json
      description: Create a new Order with the provided details
      parameters:
      - description: Order Details
        in: body
        name: Order
        required: true
        schema:
          $ref: '#/definitions/entity.OrderCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new Order
      tags:
      - Order
  /order/get:
    get:
      consumes:
      - application/json
      description: Get all Orders
      parameters:
      - description: User ID
        in: query
        name: id
        type: string
      - description: Status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.OrderRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Orders
      tags:
      - Order
  /order/update:
    put:
      consumes:
      - application/json
      description: Update the status of an Order by its ID
      parameters:
      - description: Order ID
        in: query
        name: id
        required: true
        type: string
      - description: New Status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/entity.OrderStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update status by id
      tags:
      - Order
  /product/create:
    post:
      consumes:
      - application/json
      description: Create a new Product with the provided details
      parameters:
      - description: Product Details
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/entity.ProductCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new Product
      tags:
      - Product
  /product/delete:
    delete:
      consumes:
      - application/json
      description: Delete an Product by ID
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete an Product
      tags:
      - Product
  /product/get:
    get:
      consumes:
      - application/json
      description: Get an Product by their ID
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ProductRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Product by ID
      tags:
      - Product
  /product/list:
    get:
      consumes:
      - application/json
      description: Get all Product with optional filtering
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Category ID
        in: query
        name: category_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ProductGetAllRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all Product
      tags:
      - Product
  /product/update:
    put:
      consumes:
      - application/json
      description: Update an Product's details
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      - description: Product Update Details
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/entity.ProductCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an Product
      tags:
      - Product
  /users/create:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /users/delete:
    delete:
      consumes:
      - application/json
      description: Delete a User by ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a User
      tags:
      - Users
  /users/get:
    get:
      consumes:
      - application/json
      description: Get a User by their ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserInfo'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - Users
  /users/list:
    get:
      consumes:
      - application/json
      description: Get all Users with optional filtering
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserList'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all Users
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: User login with phone number and password
      parameters:
      - description: User Login Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.LoginRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: User login
      tags:
      - Users
  /users/update:
    put:
      consumes:
      - application/json
      description: Update a User's details
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      - description: User Update Details
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateUserBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a User
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
